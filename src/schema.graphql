type Query {
  greeting(name: String!, job: String!): String!
  user: User!
  users: [User!]!
  posts(query: String): [Post!]!
  comments: [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  createComment(text: String!, author: String!, post: String!): Comment!
  updateUser(id: ID!, data: UpdateUserInput): User!
}

type Subscription {
  comment(postId: ID!): Comment!
  post: PostSubscriptionPayload!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String!
  email: String!
  age: Int
}

input CreatePostInput {
  title: String!, 
  body: String!
  published: Boolean!
  author: ID!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!,
  body: String!,
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}